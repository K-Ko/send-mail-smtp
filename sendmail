#!/usr/bin/env php
<?php
// phpcs:ignorefile

use PHPMailer\PHPMailer\PHPMailer;

// ini_set('display_errors', 1);
// error_reporting(-1);

/**
 * Helper functions
 */
function usage($msg = '', $rc = 0)
{
    global $argv;

    $msg && printf("\nERROR - $msg\n");

    printf("\nUsage: " . $argv[0] . " -c <config-file> [options]\n\n");
    printf("Options:\n");
    printf("\t-c\tConfig file {required}\n");
    printf("\t-t\tTo: address(es), can be used multiple times\n");
    printf("\t-s\tSubject\n");
    printf("\t-b\tPlain text body, if starts with @ assume get from file\n");
    printf("\t-f\tHTML body, if starts with @ assume get from file\n");
    printf("\t-w\tCC: address(es), can be used multiple times\n");
    printf("\t-z\tBCC: address(es), can be used multiple times\n");
    printf("\t-r\tFrom: From email address, overwrites config file if given\n");
    printf("\t-a\tAttachment(s)\n");
    printf("\t-p\tPriority (0|1)\n");
    printf("\t-v[vvv]\tPHPMailer verbosity\n");
    printf("\t-h\tThis help\n\n");
    printf("Possible formats for emails: 'name@example.com' or 'any name <name@example.com>'\n");
    printf("If a HTML body is set, an additional plain text body will be ignored!\n");

    exit($rc);
}

function _die($msg, $rc = 1)
{
    printf("\n::: ERROR $msg\n");
    exit($rc);
}

// --------------------------------------------------------------------------

/**
 * Find composer autoload.php
 */
$autoloads = [
    // Installed via composer
    __DIR__  . '/../../autoload.php',
    // In repo development dir
    __DIR__  . '/vendor/autoload.php'
];

foreach ($autoloads as $autoload) {
    if (is_file($autoload)) {
        require $autoload;
        unset($autoloads);
        break;
    }
}

isset($autoloads) && _die('Missing autoload.php, actual directory is ' . getcwd(), 127);

/**
 * Command line parameters
 */
$options = getopt("hc:t:s:b:f:w:z:r:a:p:v");

array_key_exists('h', $options) && usage();

$verbose = min([count((array) ($options['v'] ?? null)), 4]);

/**
 * Load config
 */
$config = trim($options['c'] ?? '');

if ($config && is_file($config)) {
    $config = require $config;
} else {
    usage('Missing or invalid config file!', 1);
}

$config = array_merge(
    [
        // Defaults, not editable by command line
        'host'        => '',
        'port'        => 25,
        'user'        => '',
        'pass'        => '',
        'verify_peer' => true,
        'timezone'    => 'UTC',
    ],
    $config
);

/**
 * Command line parameters
 */
$params = [
    'r' => 'from',
    't' => 'to',
    'w' => 'cc',
    'z' => 'bcc',
    's' => 'subject',
    'b' => 'body',
    'f' => 'html',
    'a' => 'attachments',
    'p' => 'priority',
];

foreach ($params as $short => $param) {
    if (array_key_exists($short, $options)) {
        $config[$param] = $options[$short];
    }
}

$verbose && fwrite(
    STDERR,
    implode(PHP_EOL, array_map(function ($k, $v) {
        return sprintf('%-15s: %s', $k, trim(print_r($v, true)));
    }, array_keys($config), array_values($config))) . PHP_EOL . PHP_EOL
);

extract($config, EXTR_PREFIX_ALL, 'cfg');

// SMTP needs accurate times, and the PHP time zone MUST be set
// This should be done in your php.ini, but this is how to do it if you don't have access to that
date_default_timezone_set($cfg_timezone);

/**
 * Create a PHPMailer instance
 */
$mail = new PHPMailer();

$mail->XMailer    = null;       // Suppress X-Mailer header
$mail->AllowEmpty = true;       // Body may be empty, e.g. for status emails
$mail->SMTPDebug  = $verbose;   // Enable SMTP debugging, -v ... -vvvv
$mail->CharSet    = PHPMailer::CHARSET_UTF8;
$mail->Encoding   = PHPMailer::ENCODING_BASE64;

// Send debug output to STDERR
$mail->Debugoutput = function ($str, $level) {
    fwrite(STDERR, sprintf('[%d] %s', $level, rtrim($str)) . PHP_EOL);
};

if (!$cfg_verify_peer){
    $mail->SMTPOptions = [ 'ssl' => [ 'verify_peer' => false, 'verify_peer_name' => false, 'allow_self_signed' => true ] ];
}

// Tell PHPMailer to use SMTP with authentication
$mail->isSMTP();
$mail->SMTPAuth = true;
$mail->AuthType = 'LOGIN';

// Set the hostname and port of the mail server
$mail->Host = $cfg_host;
$mail->Port = $cfg_port; # likely to be 25, 465 or 587

// Username and password for SMTP authentication
$mail->Username = $cfg_user;
$mail->Password = $cfg_pass;

// Set who the message is to be sent from
if ($cfg_from) {
    $addr = $mail->parseAddresses($cfg_from);
    isset($addr[0]) && $mail->setFrom($addr[0]['address'], $addr[0]['name']);
}

// To: 'name@example.com' or 'any name <name@example.com>'
if ($cfg_to) {
    foreach ((array) $cfg_to as $addr) {
        $addr = $mail->parseAddresses($addr);
        isset($addr[0]) && $mail->addAddress($addr[0]['address'], $addr[0]['name']);
    }
}

// CC: 'name@example.com' or 'any name <name@example.com>'
if ($cfg_cc) {
    foreach ((array) $cfg_cc as $addr) {
        $addr = $mail->parseAddresses($addr);
        isset($addr[0]) && $mail->addCC($addr[0]['address'], $addr[0]['name']);
    }
}

// BCC: 'name@example.com' or 'any name <name@example.com>'
if ($cfg_bcc) {
    foreach ((array) $cfg_bcc as $addr) {
        $addr = $mail->parseAddresses($addr);
        isset($addr[0]) && $mail->addBCC($addr[0]['address'], $addr[0]['name']);
    }
}

if (trim($cfg_subject)) {
    // Encode the subject line to UTF-8
    $mail->Subject = '=?UTF-8?B?' . base64_encode($cfg_subject) . '?=';
}

// 1st use HTML body
if (!empty($cfg_html)) {
    if (substr($cfg_html, 0, 1) === '@') {
        $cfg_html = substr($cfg_html, 1);
        is_file($cfg_html) || _die('Missing HTML body file: ' . $cfg_html, 2);
        $cfg_html = file_get_contents($cfg_html);
    }

    $mail->Body = $cfg_html;
    $mail->isHTML();
} else {
    if (substr($cfg_body, 0, 1) === '@') {
        $cfg_body = substr($cfg_body, 1);
        is_file($cfg_body) || _die('Missing message body file: ' . $cfg_body, 3);
        $cfg_body = file_get_contents($cfg_body);
    }

    $mail->Body = $cfg_body;
    $mail->WordWrap = PHPMailer::STD_LINE_LENGTH;
}

// Attachments
foreach ((array) $cfg_attachments as $attachment) {
    is_file($attachment) || _die('Missing attachment: ' . $attachment, 4);
    $mail->addAttachment($attachment);
}

if ($cfg_priority) {
    // https://stackoverflow.com/a/10766851
    // For most clients expecting the Priority header:
    // 1 = High, 2 = Medium, 3 = Low
    $mail->Priority = 1;
    // MS Outlook custom header
    // May set to "Urgent" or "Highest" rather than "High"
    $mail->AddCustomHeader('X-MSMail-Priority: High');
}

// Send the message, check for errors
if (!$mail->send()) {
    fwrite(STDERR, $mail->ErrorInfo . PHP_EOL);
    exit(127);
}
